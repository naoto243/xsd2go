// Models for {{ .TargetNamespace }}
{{$packageName := .GoPackageName -}}
package {{ $packageName }}

import (
    {{- range .GoImportsNeeded}}
        "{{ . }}"
    {{- end }}
)

{{range .ExportableElements }}
  // Element
  // {{- .Doc }}
  type {{ .GoName }} struct {
    XMLName xml.Name `xml:"{{.Name}}"`
    {{ range .Attributes }}
        // {{ .Doc }}
        {{ .GoName }} {{.GoForeignModule}}{{.GoType}} `xml:"{{.XmlName}},{{.Modifiers}},omitempty"` // {{ .Use  }}
    {{end }}

    {{ range .Elements }}
      {{ .GoFieldName}} {{.GoMemLayout}}{{.GoForeignModule}}{{ .GoTypeName }} `xml:"{{.XmlName}},omitempty"`
    {{ end }}

    {{- if .ContainsText }}
      Text string `xml:",chardata,omitempty"`
    {{- end}}
  }

{{end}}


// XSD ComplexType declarations
{{range .ExportableComplexTypes }}
  // {{- .Doc }}
  type {{ .GoName }} struct {
  {{- if not .HasXmlNameAttribute }}
    XMLName xml.Name
  {{- end}}
  {{ range .Attributes }}
      // {{ .Doc }}
      {{ .GoName }} {{.GoForeignModule}}{{.GoType}} `xml:"{{.XmlName}},{{.Modifiers}},omitempty"`  //{{ .Use  }}
  {{end }}

  {{- .ChoiceState -}}
  {{ range .Elements }}
    {{ .GoFieldName}} {{.GoMemLayout}}{{.GoForeignModule}}{{ .GoTypeName }} `xml:"{{.XmlName}},omitempty"`
  {{end}}

  {{- if .ContainsText }}
    Text string `xml:",chardata,omitempty"`
  {{- end}}
  InnerXml string `xml:",innerxml,omitempty"`
  }
{{end}}

// XSD SimpleType declarations
{{range .ExportableSimpleTypes }}
  {{ $simpleType := . }}
  {{ range .Patterns }}
  // May Be {{ .Value }}
  {{- end }}
  type {{ .GoName }} string

  {{ $simpleType := . }}
  {{ range .Enums }}
  const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
  {{end }}

{{end}}
